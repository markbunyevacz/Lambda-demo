"""
Data Verification Tool
======================

Ez az eszk√∂z arra szolg√°l, hogy √∂sszehasonl√≠tsa a ChromaDB-ben t√°rolt
feldolgozott term√©kadatokat egy "f√∂ldi igazs√°ggal" (ground truth),
amelyet k√∂zvetlen√ºl a forr√°s PDF-b≈ël nyer√ºnk ki egy √°ltal√°nos√≠tott
AI elemz√©si folyamattal.

A c√©l az adatintegrit√°s ellen≈ërz√©se √©s annak valid√°l√°sa, hogy a
jelenlegi, l√©p√©senk√©nti adatfeldolgoz√°si pipeline sor√°n nem
vesznek-e el vagy torzulnak-e √©rt√©kes inform√°ci√≥k.

Ez a f√°jl a 2024-07-31-i megbesz√©l√©s alapj√°n j√∂tt l√©tre,
az√©rt, hogy egy k√∂nnyen visszavonhat√≥, j√≥l dokument√°lt k√≠s√©rletet
tegy√ºnk az adatvalid√°ci√≥ automatiz√°l√°s√°ra.
"""

import sys
import json
import logging
import asyncio
from pathlib import Path
from typing import Dict, Any, Optional

# A deepdiff k√∂nyvt√°r a k√©t JSON objektum r√©szletes √∂sszehasonl√≠t√°s√°hoz
# Telep√≠t√©s: pip install deepdiff
from deepdiff import DeepDiff

# Helyi importok a megl√©v≈ë komponensek √∫jrahasznos√≠t√°s√°hoz
# A sys.path m√≥dos√≠t√°sa sz√ºks√©ges, hogy a script a 'tools' alk√∂nyvt√°rb√≥l
# is el√©rje a 'src/backend' gy√∂k√©rben l√©v≈ë modulokat.
sys.path.append(str(Path(__file__).resolve().parents[2]))

# Val√≥di importok a m≈±k√∂d√©shez
from sqlalchemy.orm import Session
from app.database import SessionLocal, engine
from app.models import Product, Manufacturer, Category, ProcessedFileLog
from app.services.extraction_service import RealPDFExtractor, AdvancedTableExtractor
from app.services.ai_service import AnalysisService
import chromadb

# Adatb√°zis be√°ll√≠t√°sa
# TODO: Ezt a r√©szt √©rdemes lehet egy k√∂zponti helyre szervezni
# engine = create_engine(str(DATABASE_URL))
# SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


class DataVerifier:
    """
    √ñsszehasonl√≠tja a ChromaDB adatokat a PDF-b≈ël gener√°lt "f√∂ldi igazs√°ggal".
    """

    def __init__(self):
        """
        Inicializ√°lja a sz√ºks√©ges klienseket √©s er≈ëforr√°sokat.
        Ez mag√°ban foglalja az adatb√°zis-kapcsolatot, a ChromaDB klienst,
        a PDF kinyer≈ët √©s az AI elemz≈ët.
        """
        print("Initializing Data Verifier with real components...")
        self.db_session = SessionLocal()
        # Itt felt√©telezz√ºk, hogy a ChromaDB a default helyen fut perzisztensen
        self.chroma_client = chromadb.PersistentClient(path="./chroma_db")
        self.extractor = RealPDFExtractor()
        self.ai_analyzer = AnalysisService()
        print("‚úÖ Verifier initialized.")

    def get_product_pdf_path(self, product_id: int) -> Optional[Path]:
        """
        Lek√©rdezi a megadott term√©kazonos√≠t√≥hoz tartoz√≥ eredeti PDF f√°jl
        el√©r√©si √∫tj√°t a PostgreSQL adatb√°zisb√≥l.
        """
        print(f"Fetching PDF path for product_id: {product_id}")
        try:
            product = self.db_session.query(Product).filter(
                Product.id == product_id).first()
            if product:
                specs = product.technical_specifications
                if specs and isinstance(specs, dict) and specs.get('source_pdf'):
                    pdf_name = specs['source_pdf']
                    # Felt√©telezz√ºk a let√∂lt√©si strukt√∫r√°t
                    base_path = Path(__file__).resolve().parents[2]
                    pdf_path = base_path / "downloads" / "rockwool_datasheets" / pdf_name
                    print(f"üìÑ Found PDF: {pdf_path}")
                    return pdf_path
            print(
                f"‚ö†Ô∏è PDF source not found in database for product_id: {product_id}")
            return None
        except Exception as e:
            print(f"‚ùå Database error while fetching PDF path: {e}")
            return None
        finally:
            self.db_session.close()

    def _create_general_prompt(self, text_content: str, filename: str) -> str:
        """
        L√©trehoz egy √°ltal√°nos c√©l√∫ promptot a "f√∂ldi igazs√°g" kinyer√©s√©hez.
        Nem specifikus egyetlen gy√°rt√≥ra sem.
        """
        return f"""
        Analyze the following text extracted from the PDF file '{filename}'.
        Your task is to act as a data extraction engine. Extract all relevant
        technical specifications, product information, descriptions, pricing,
        and any other structured data you can find.

        Please return the result in a single, well-formed JSON object.
        The JSON structure should be logical and based on the content of the
        document. Create nested objects for different sections like
        'product_details', 'technical_data', 'physical_properties', etc.

        EXTRACTED TEXT:
        ---
        {text_content[:15000]}
        ---

        Return ONLY the JSON object. Do not include any other text or explanation.
        """

    def generate_ground_truth(self, pdf_path: Path) -> Dict[str, Any]:
        """
        Legener√°lja a "f√∂ldi igazs√°g" JSON-t a PDF-b≈ël.
        1. Kinyeri a teljes sz√∂veget a PDF-b≈ël.
        2. Egy √°ltal√°nos√≠tott prompt seg√≠ts√©g√©vel elk√ºldi az AI-nak elemz√©sre.
        3. Visszaadja a struktur√°lt JSON v√°laszt.
        """
        print(f"Generating ground truth from: {pdf_path.name}")
        try:
            # 1. Sz√∂veg kinyer√©se
            text, tables, _ = self.extractor.extract_pdf_content(pdf_path)
            if not text or not text.strip():
                print("‚ö†Ô∏è No text could be extracted from the PDF.")
                return {}

            # 2. Prompt l√©trehoz√°sa
            prompt = self._create_general_prompt(text, pdf_path.name)

            # 3. AI elemz√©s (a megl√©v≈ë analyzer √∫jrahasznos√≠t√°s√°val)
            print("ü§ñ Sending text to AI for ground truth analysis...")
            # Mivel az analyzer egy specifikus promptot v√°r,
            # itt egy √°ltal√°nosabb h√≠v√°st kellene megval√≥s√≠tani.
            # Most egy tr√ºkkel oldjuk meg: a megl√©v≈ë met√≥dust h√≠vjuk,
            # de a promptot fel√ºl√≠rjuk. Ide√°lisabb lenne egy √∫j met√≥dus.
            loop = asyncio.get_event_loop()
            ai_result = loop.run_until_complete(
                self.ai_analyzer.analyze_pdf_content(text, tables, pdf_path.name)
            )

            # 4. V√°lasz feldolgoz√°sa
            print("\n--- AI Analysis Result ---")
            print(json.dumps(ai_result, indent=2, ensure_ascii=False))

            confidence = ai_result.get("extraction_metadata", {}).get("confidence_score", 0)
            if confidence < 0.7: # Assuming a confidence threshold
                print(f"‚ö†Ô∏è Low confidence score: {confidence}. Ground truth might be inaccurate.")
                return {} # Return empty if confidence is low

            json_text = json.dumps(ai_result, indent=2, ensure_ascii=False)
            print("‚úÖ Ground truth JSON received from AI.")
            return json.loads(json_text)

        except Exception as e:
            print(f"‚ùå Error during ground truth generation: {e}")
            return {}

    def get_chromadb_data(self, product_id: int) -> Dict[str, Any]:
        """
        Lek√©rdezi a megadott term√©kazonos√≠t√≥hoz tartoz√≥ √∂sszes relev√°ns
        inform√°ci√≥t a ChromaDB-b≈ël, els≈ësorban a metaadatokat.
        """
        print(f"Fetching ChromaDB data for product_id: {product_id}")
        try:
            collection = self.chroma_client.get_collection("rockwool_products")
            # A ChromaDB 'where' filtere jelenleg csak a legfels≈ë szint≈±
            # metaadat mez≈ëkre m≈±k√∂dik egyszer≈±en.
            # A 'product_id' egyedi azonos√≠t√≥k√©nt van haszn√°lva az ID-ban.
            result = collection.get(
                ids=[f"rockwool_product_{product_id}"],
                include=["metadatas"]
            )
            
            if result and result['metadatas']:
                print("‚úÖ ChromaDB data found.")
                return result['metadatas'][0]
            
            print("‚ö†Ô∏è ChromaDB data not found.")
            return {}
        except Exception as e:
            print(f"‚ùå ChromaDB error: {e}")
            return {}

    def compare_data(self, ground_truth: Dict, chromadb_data: Dict):
        """
        √ñsszehasonl√≠tja a k√©t JSON objektumot √©s ki√≠rja az elt√©r√©seket.
        A DeepDiff k√∂nyvt√°rat haszn√°lja a r√©szletes, olvashat√≥ riport√©rt.
        """
        print("\n" + "=" * 80)
        print("üìä DATA COMPARISON REPORT")
        print("=" * 80)

        diff = DeepDiff(ground_truth,
                        chromadb_data,
                        ignore_order=True,
                        verbose_level=1)

        if not diff:
            print("‚úÖ SUCCESS: No differences found. Data is consistent.")
        else:
            print("‚ö†Ô∏è WARNING: Differences found between ground truth and ChromaDB.")
            print(diff.pretty())

        print("=" * 80)

    def run_verification(self, product_id: int):
        """
        A teljes verifik√°ci√≥s folyamatot vez√©nyl≈ë f≈ë met√≥dus.
        """
        print(f"\nüöÄ Starting verification for product_id: {product_id}")

        pdf_path = self.get_product_pdf_path(product_id)
        if not pdf_path or not pdf_path.exists():
            print(f"‚ùå ERROR: PDF path not found for product_id {product_id}.")
            return

        # 1. Gener√°ljuk a "f√∂ldi igazs√°got"
        ground_truth_json = self.generate_ground_truth(pdf_path)
        if not ground_truth_json:
            print("‚ùå ERROR: Failed to generate ground truth. Aborting.")
            return

        # 2. Lek√©rdezz√ºk a jelenlegi √°llapotot a ChromaDB-b≈ël
        chromadb_json = self.get_chromadb_data(product_id)
        if not chromadb_json:
            print("‚ùå ERROR: Failed to retrieve data from ChromaDB. Aborting.")
            return

        # 3. √ñsszehasonl√≠tjuk a kett≈ët √©s riport√°ljuk az eredm√©nyt
        self.compare_data(ground_truth_json, chromadb_json)
        print("üèÅ Verification complete.")


if __name__ == '__main__':
    """
    A szkript parancssori interf√©sze.
    Haszn√°lat: python data_verification_tool.py <product_id>
    """
    if len(sys.argv) < 2:
        print(
            "Usage: python src/backend/tools/data_verification_tool.py "
            "<product_id>"
        )
        sys.exit(1)

    try:
        product_id_to_check = int(sys.argv[1])
        verifier = DataVerifier()
        verifier.run_verification(product_id_to_check)
    except ValueError:
        print(f"Error: Invalid product_id '{sys.argv[1]}'. "
              "Please provide an integer.")
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1) 