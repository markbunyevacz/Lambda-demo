services:
  db:
    image: postgres:15
    container_name: lambda_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - lambda_network

  cache:
    image: redis:latest
    container_name: lambda_cache
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - lambda_network

  backend:
    build:
      context: ./backend
    container_name: lambda_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-exclude "celerybeat-schedule"
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_started
      cache:
        condition: service_started
    restart: unless-stopped
    networks:
      - lambda_network

  celery_worker:
    build:
      context: ./backend
    container_name: lambda_celery_worker
    command: celery -A app.celery_app worker --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_started
      cache:
        condition: service_started
    restart: unless-stopped
    networks:
      - lambda_network

  celery_beat:
    build:
      context: ./backend
    container_name: lambda_celery_beat
    command: celery -A app.celery_app beat --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    depends_on:
      celery_worker:
        condition: service_started
    restart: unless-stopped
    networks:
      - lambda_network

  celery_flower:
    build:
      context: ./backend
    container_name: lambda_celery_flower
    command: celery -A app.celery_app flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - .env
    depends_on:
      celery_worker:
        condition: service_started
    restart: unless-stopped
    networks:
      - lambda_network

  frontend:
    build:
      context: ./frontend
    container_name: lambda_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - lambda_network

volumes:
  postgres_data:
    name: lambda_postgres_data

networks:
  lambda_network:
    name: lambda_network 