services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      # Explicit UTF-8 encoding for Hungarian characters
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=C.UTF-8
      - LC_ALL=C.UTF-8
      - LANG=C.UTF-8
    restart: unless-stopped
    networks:
      - lambda_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - lambda_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    # Default production command - override in docker-compose.dev.yml for development
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./src/backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
    restart: unless-stopped
    networks:
      - lambda_network

  celery_worker:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app.app worker --loglevel=info
    volumes:
      - ./src/backend:/app
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
      cache:
        condition: service_started
    restart: unless-stopped
    networks:
      - lambda_network
      
  # celery_flower:
  #   image: mher/flower
  #   container_name: lambda-celery_flower-1
  #   ports:
  #     - "5555:5555"
  #   environment:
  #     - CELERY_BROKER_URL=redis://cache:6379/0
  #     - FLOWER_PORT=5555
  #   depends_on:
  #     - backend
  #     - cache
  #   restart: unless-stopped
  #   networks:
  #     - lambda_network

  frontend:
    build:
      context: ./src/frontend
    command: npm run dev
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped
    networks:
      - lambda_network

  chroma:
    image: chromadb/chroma
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/.chroma/index
    restart: unless-stopped
    networks:
      - lambda_network

volumes:
  postgres_data:
    name: lambda_postgres_data
  chroma_data:
    name: lambda_chroma_data

networks:
  lambda_network:
    name: lambda_network 