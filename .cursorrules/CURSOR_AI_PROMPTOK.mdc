---
description: 
globs: 
alwaysApply: true
---
# Lambda.hu AI Rendszer - Cursor AI Promptok

## üéØ PRODUCTION COMPLETE STATUS ‚úÖ

### F√°zis 1: Alapoz√°s √©s Infrastrukt√∫ra ‚úÖ COMPLETE
- ‚úÖ **Docker-compose k√∂rnyezet** - FastAPI, PostgreSQL, Redis szolg√°ltat√°sok
- ‚úÖ **Adatb√°zis modellek** - SQLAlchemy 2.0 szintaxis, manufacturer, category, product t√°bl√°k
- ‚úÖ **Backend infrastrukt√∫ra** - FastAPI alkalmaz√°s, CORS, DB kapcsolat

### F√°zis 2: Adat-pipeline √©s Web Scraping ‚úÖ COMPLETE
- ‚úÖ **Rockwool Live Scraping System** - 57 f√°jl let√∂lt√©se 100% sikerrel
- ‚úÖ **State Management System** - JSON, CSV, SQLite form√°tumok
- ‚úÖ **BrightData MCP** - 48 tool strategic reserve √°llapotban
- ‚úÖ **Database Integration** - PostgreSQL + ChromaDB hibrid megold√°s

### F√°zis 3: AI Modul - RAG Pipeline üîÑ INFRASTRUCTURE READY
- ‚úÖ **ChromaDB inicializ√°l√°s** - 92 term√©k vektoriz√°lva
- ‚úÖ **RAG keres√©s m≈±k√∂dik** - Term√©szetes nyelv≈± lek√©rdez√©sek
- üîÑ **BuildingMaterialsAI service** - Fejleszt√©s alatt
- üîÑ **LangChain integr√°ci√≥** - Finomhangol√°s sz√ºks√©ges

## üöÄ COMPLETED TASK PROMPTS

**Task 1.1: Projektstrukt√∫ra √©s Docker-compose** ‚úÖ COMPLETE
@workspace
A projekt alapvet≈ë Docker k√∂rnyezete k√©szen √°ll.
Eredm√©ny: 
- docker-compose.yml h√°rom service-szel (backend, db, cache)
- Backend Dockerfile Python 3.11 alapon
- PostgreSQL 15 perzisztens t√°rol√°ssal
- Redis cache szolg√°ltat√°s
- K√∂rnyezeti v√°ltoz√≥k .env f√°jlb√≥l

**Task 1.2: Adatb√°zis Modellek (SQLAlchemy)** ‚úÖ COMPLETE
@workspace  
SQLAlchemy adatb√°zis modellek implement√°lva.
Eredm√©ny:
- manufacturer.py - gy√°rt√≥k t√°bl√°ja
- category.py - kateg√≥ri√°k self-referential kapcsolattal
- product.py - term√©kek t√°bl√°ja
- SQLAlchemy 2.0 szintaxis haszn√°lata
- JSONB t√≠pus√∫ oszlopok PostgreSQL-hez
- to_dict() met√≥dusok minden modellhez

**Task 2.1: Rockwool Live Scraping System** ‚úÖ COMPLETE
@workspace
Rockwool live scraping system implement√°lva √©s production-ready.
Eredm√©ny:
- **rockwool_product_scraper.py** - Term√©kadatlapok (45 f√°jl)
- **brochure_and_pricelist_scraper.py** - Bros√∫r√°k √©s √°rlist√°k (12 f√°jl)
- **rockwool_state_manager.py** - √Ållapot ment√©s √©s kezel√©s
- **Live data fetching** - Nincs fallback f√ºgg≈ës√©g
- **Smart duplicate handling** - Hash-alap√∫ egyedi elnevez√©s
- **Hungarian character support** - HTML entity dek√≥dol√°s
- **Concurrent downloads** - Async/await optimaliz√°l√°s
- **100% success rate** - 57/57 f√°jl sikeresen let√∂ltve
- **Multi-format state export** - JSON, CSV, SQLite

**Task 2.2: BrightData MCP Strategic Reserve** ‚úÖ COMPLETE
@workspace
BrightData MCP AI scraping rendszer strategic reserve √°llapotban.
Eredm√©ny:
- **48 BrightData tools** bet√∂ltve √©s el√©rhet≈ë
- **MCP server connection** sikeres
- **Strategic decision framework** implement√°lva
- **Performance comparison** - Direct HTTP vs BrightData MCP
- **Cost-benefit analysis** - $500+/month vs free HTTP
- **Usage recommendation** - Complex sites only (CAPTCHA, anti-bot)

## üîÑ ACTIVE DEVELOPMENT TASKS

### F√°zis 3: AI Modul - RAG Pipeline

**Task 3.1: RAG Service Implement√°ci√≥** üîÑ IN PROGRESS
@workspace
BuildingMaterialsAI service fejleszt√©se LangChain seg√≠ts√©g√©vel.
Hely: backend/app/services/ai_service.py
Jelenlegi √°llapot:
- ‚úÖ ChromaDB inicializ√°l√°s (92 term√©k vektoriz√°lva)
- ‚úÖ RAG keres√©s alapjai m≈±k√∂dnek
- üîÑ LangChain integr√°ci√≥ finomhangol√°sa
- üîÑ Magyar nyelv≈± prompt optimaliz√°l√°s
- üîÑ get_product_recommendations met√≥dus fejleszt√©se

**Task 3.2: State Management Integration** üÜï NEW
@workspace
Rockwool state management integr√°ci√≥ a RAG pipeline-ba.
K√∂vetelm√©nyek:
- Rockwool state adatok automatikus bet√∂lt√©se ChromaDB-be
- Verzi√≥kezel√©s √©s inkrement√°lis friss√≠t√©sek
- Multi-format export integr√°ci√≥ (JSON, CSV, SQLite)
- Performance monitoring √©s analytics

### F√°zis 4: Backend API √©s Frontend Integr√°ci√≥

**Task 4.1: AI Chat API V√©gpont** üîÑ PLANNED
@workspace
FastAPI v√©gpont az AI asszisztens sz√°m√°ra.
Hely: backend/app/api/ai_assistant.py
K√∂vetelm√©nyek:
- Endpoint: POST /api/v1/ai/chat
- Pydantic modellek valid√°ci√≥hoz
- BuildingMaterialsAI service integr√°ci√≥
- Hibakezel√©s √©s logging
- State management connection

**Task 4.2: Frontend AI Chat Komponens** üîÑ PLANNED
@workspace
React komponens AI chat ablakhoz.
Hely: frontend/src/components/AIAssistant/AIAssistant.tsx
K√∂vetelm√©nyek:
- Lebeg≈ë chat ablak (jobb als√≥ sarok)
- @tanstack/react-query integr√°ci√≥
- Real-time typing indik√°tor
- Term√©kaj√°nl√°s k√°rty√°k
- State management status display

### F√°zis 5: Production Optimization

**Task 5.1: Performance Monitoring** üÜï NEW
@workspace
Teljes√≠tm√©ny monitoring √©s analytics rendszer.
K√∂vetelm√©nyek:
- Scraping performance metrics
- State management analytics
- RAG pipeline performance tracking
- Error rate monitoring
- Resource usage optimization

**Task 5.2: Multi-Client Architecture** üîÑ PLANNED
@workspace
Modular client-specific architecture el≈ëk√©sz√≠t√©se.
K√∂vetelm√©nyek:
- Factory pattern implement√°ci√≥
- Client isolation (Rockwool, Leier, Baumit)
- Shared utilities √©s base classes
- API endpoint standardization

### F√°zis 6: Testing √©s Deployment

**Task 6.1: Comprehensive Testing** üîÑ PLANNED
@workspace
Teljes k√∂r≈± tesztel√©si rendszer.
K√∂vetelm√©nyek:
- Unit tesztek minden modulhoz
- Integration tesztek API v√©gpontokhoz
- End-to-end tesztek scraping workflow-hoz
- Performance tesztek nagy adathalmazokhoz
- State management tesztek

## üìä CURRENT METRICS

### Production Ready Components
- **Infrastructure**: 4 modulok (Docker, Database, Backend, State Management)
- **Scraping System**: 2 scrapers (100% success rate)
- **Data Management**: 3 formats (JSON, CSV, SQLite)
- **Strategic Tools**: 1 reserve system (BrightData MCP)

### Development Pipeline
- **Active Tasks**: 3 komponens fejleszt√©s alatt
- **Planned Tasks**: 5 komponens tervezve
- **Next Milestone**: RAG Pipeline Foundation (57 ROCKWOOL file vektoriz√°l√°sa)

### Success Metrics
- **Data Preservation**: 100% (zero data loss)
- **Performance**: 5-10x faster than AI alternatives
- **Cost Efficiency**: $0 vs $500+/month
- **Reliability**: 57/57 successful downloads
- **Character Support**: Full Hungarian encoding
Haszn√°ld a httpx.AsyncClient-et a FastAPI alkalmaz√°s tesztel√©s√©hez.
K√ºldj egy val√≥szer≈± POST k√©r√©st egy √©p√≠t≈ëipari k√©rd√©ssel (pl. "Milyen vastag szigetel√©s kell homlokzatra?").
Ellen≈ërizd, hogy a v√°lasz HTTP st√°tuszk√≥dja 200.
Ellen≈ërizd, hogy a JSON v√°lasz tartalmazza az ai_response √©s a recommended_products kulcsokat.
Ellen≈ërizd, hogy az ai_response nem √ºres string.