---
description: 
globs: 
alwaysApply: true
---
FEJLESZT√âSI_ELVEK.md (Project Rules for Cursor)

# Lambda.hu √âp√≠t≈ëanyag AI Projekt - Fejleszt√©si Szab√°lyok

## √Åltal√°nos Elvek
- Minden k√≥dgener√°l√°sn√°l √©s m√≥dos√≠t√°sn√°l vedd figyelembe a projekt teljes kontextus√°t (`@workspace`).
- A gener√°lt k√≥d legyen tiszta, karbantarthat√≥ √©s k√∂vesse a "production-ready" elveket. Nincsenek placeholder-ek vagy dummy adatok.
- A "Teljes Rendszerterv" √©s az "Implement√°ci√≥s √ötmutat√≥" dokumentumokban lefektetett technol√≥giai stacket (FastAPI, SQLAlchemy, Scrapy, React/Next.js, LangChain, Celery, PostgreSQL) haszn√°ld.

## Fejleszt√©si Metodol√≥gia (Tapasztalatok Alapj√°n)

### PROVEN SUCCESS METHODOLOGY (2025-01-27 - Rockwool Term√©kadatlap)
**üéØ Evidence-First Development Process:**
1. **Evidence-First Approach** - Always start with existing working data (debug files, cached content)
2. **Incremental Component Testing** - Test each component individually before integration
3. **Zero Data Loss Policy** - Implement duplicate handling, never overwrite existing data
4. **Fresh Data Strategy** - Auto-refresh content before scraping when possible
5. **Production Validation** - Complete end-to-end testing before marking anything as complete

**üîß Technical Implementation Patterns:**
- **Smart Duplicate Handling**: Use subdirectories (`duplicates/`) with URL hashing for unique filenames
- **Debug File Strategy**: Use cached HTML content to bypass dynamic loading issues (cookie dialogs)
- **Async Concurrent Downloads**: Implement async/await patterns for performance
- **Comprehensive Logging**: Include success/failure counts, file locations, and processing time
- **Graceful Fallbacks**: Always provide fallback mechanisms when primary methods fail

### LEGACY METHODOLOGY (Pre-2025-01-27)
- **Struktur√°lt probl√©mamegold√°s**: Minden hib√°n√°l vagy feladatn√°l el≈ëbb elemezd a probl√©m√°t, tervezd meg a megold√°st, CSAK AZT√ÅN kezdj el k√≥dolni.
- **Dokument√°l√°s k√∂zben**: Minden jelent≈ës v√°ltoztat√°sn√°l azonnal √≠rd meg a dokument√°ci√≥t √©s kommenteket - ez seg√≠t √°tgondolni a megold√°st.
- **Verzi√≥ kompatibilit√°s ellen≈ërz√©s**: Docker k√∂rnyezetben MINDIG ellen≈ërizd a f√ºgg≈ës√©g verzi√≥kat miel≈ëtt implement√°ln√°l.
- **Minim√°lis k√ºls≈ë f√ºgg≈ës√©gek**: Ker√ºld a felesleges npm/pip csomagokat - egyszer≈± megold√°sok el≈ënyben.
- **Tesztel√©s minden l√©p√©sn√©l**: Ne v√°rj a teljes implement√°ci√≥ v√©g√©re - tesztelj √©p√≠t√©s k√∂zben.

## Docker √©s DevOps Elvek (Kritikus Tanuls√°gok)
- **Next.js Docker**: MINDIG `npx next dev` haszn√°lat a CMD-ben "next: not found" hib√°k elker√ºl√©s√©re.
- **F√ºgg≈ës√©g konfliktusok**: TypeScript √©s React verzi√≥k harm√≥ni√°ja kritikus - Next.js 14.2.18 + React 18 kombin√°ci√≥t haszn√°lj.
- **Container √©p√≠t√©s**: `--no-cache` flag haszn√°lata probl√©m√°k eset√©n, ne csak √∫jraind√≠tsd a service-t.
- **Hibakeres√©s priorit√°s**: 
  1. Container logok (`docker-compose logs [service]`)
  2. F√ºgg≈ës√©g verzi√≥ ellen≈ërz√©s
  3. Dockerfile optimaliz√°l√°s
  4. √öjabb megk√∂zel√≠t√©s keres√©se
- **Build estrat√©gia**: Egyszer≈± single-stage Dockerfile fejleszt√©shez, multi-stage csak production-ra.

### Windows PowerShell Kompatibilit√°s (2025-06-29 - MEGOLDVA ‚úÖ)
**üîß NPX Kompatibilit√°si Fix:**
- **Probl√©ma**: `[WinError 2] A rendszer nem tal√°lja a megadott f√°jlt` NPX parancsok eset√©n
- **Megold√°s**: Platform detection √©s `npx.cmd` haszn√°lata Windows rendszeren
- **Implement√°ci√≥**: 
  ```python
  import platform
  npx_cmd = "npx.cmd" if platform.system() == "Windows" else "npx"
  ```
- **Eredm√©ny**: BrightData MCP 48 tool sikeresen bet√∂ltve, Claude AI integr√°ci√≥ m≈±k√∂dik

**üêç Python 3.12 Upgrade (Jaclang Kompatibilit√°s):**
- **Probl√©ma**: `ImportError: cannot import name 'override' from 'typing'` Python 3.11-el
- **Megold√°s**: Python 3.12.10 upgrade √©s √∫j virtual environment (`.venv312`)
- **Parancsok**:
  ```bash
  py -3.12 -m venv .venv312
  .venv312\Scripts\activate
  pip install jaclang
  ```
- **Eredm√©ny**: `jac --version` m≈±k√∂dik, `override` decorator el√©rhet≈ë

**‚úÖ Tesztel√©si Eredm√©nyek:**
- NPX parancsok: ‚úÖ M≈±k√∂dik
- Node.js v20.13.1: ‚úÖ El√©rhet≈ë  
- MCP Server startup: ‚úÖ Sikeres
- BrightData tools: ‚úÖ 48/48 bet√∂ltve
- Claude AI API calls: ‚úÖ M≈±k√∂dik
- PowerShell subprocess: ‚úÖ Hib√°k n√©lk√ºl

## K√≥dol√°si St√≠lus
- **Python (Backend):**
    - Form√°z√≥: `black`
    - T√≠pusellen≈ërz√©s (Type Hinting): K√∂telez≈ë minden f√ºggv√©nydefin√≠ci√≥n√°l √©s v√°ltoz√≥n√°l.
    - API-k: Minden API v√©gponthoz Pydantic s√©ma sz√ºks√©ges a valid√°ci√≥hoz.
    - **Dokument√°ci√≥**: Minden funkci√≥n√°l r√©szletes docstring python konvenci√≥kkal.
- **TypeScript (Frontend):**
    - M√≥d: `Strict mode`
    - T√≠pusok: Explicit `return type`-ok k√∂telez≈ëek. Minden komponensnek saj√°t `props` interface-szel kell rendelkeznie.
    - St√≠lus: `Tailwind CSS`-t haszn√°lj a megadott design tokenekkel.
    - **Komponens dokument√°ci√≥**: Minden React komponens tetej√©n komment a funkci√≥r√≥l.

## F√°jl- √©s Elnevez√©si Konvenci√≥k
- API route-ok: `/backend/app/api/[resource].py`
- Adatb√°zis modellek: `/backend/app/models/[model].py`
- Service-ek: `/backend/app/services/[service_name]_service.py`
- React komponensek: `/frontend/src/components/[Feature]/[Component].tsx` (PascalCase)
- React hook-ok: `/frontend/src/hooks/use[HookName].ts` (camelCase)

## Hibakezel√©si Protokoll (√öj)
- **Els≈ë l√©p√©s**: Probl√©ma pontos elemz√©se √©s dokument√°l√°sa
- **M√°sodik l√©p√©s**: Lehets√©ges megold√°sok brainstormel√©se
- **Harmadik l√©p√©s**: Legegyszer≈±bb megold√°s implement√°l√°sa
- **Negyedik l√©p√©s**: Tesztel√©s √©s valid√°l√°s
- **√ñt√∂dik l√©p√©s**: Tapasztalatok dokument√°l√°sa a j√∂v≈ëre n√©zve
- **TILTOTT**: Random pr√≥b√°lgat√°s √©s t√∂bbsz√∂ri ugyanolyan megk√∂zel√≠t√©s

## Specifikus Projekt K√∂vetelm√©nyek
- **Nyelv:** Minden felhaszn√°l√≥ fel√© ir√°nyul√≥ sz√∂veg, komment√°r, log √ºzenet √©s hiba√ºzenet legyen magyar nyelv≈±.
- **Web Scraping:** Minden scraper az `async/await` patternt k√∂vesse. A hibakezel√©s √©s az udvarias k√©sleltet√©s (`asyncio.sleep`) k√∂telez≈ë.
- **AI V√°laszok:** Az AI asszisztens v√°laszainak form√°tuma √©s nyelvezete mindig feleljen meg a `Teljes Rendszerterv`-ben defini√°lt "√©p√≠t√©szeti szak√©rt≈ëi" st√≠lusnak.
- **Adatform√°tumok:**
    - Az √°rakat `HUF` p√©nznemben, `m2`, `db` stb. egys√©gekkel add meg, ahogy a Rendszertervben szerepel.
    - A m≈±szaki param√©tereket a normaliz√°lt JSONB strukt√∫r√°ban t√°rold.

## 9. AI AGENT SPECIFIK√ÅCI√ìS SABLON

### 9.1 √Åltal√°nos Agent Architekt√∫ra

A Lambda demo AI agentjei a k√∂vetkez≈ë alapelvek ment√©n m≈±k√∂dnek:

#### Agent Tulajdons√°gok
- **Auton√≥mia**: √ñn√°ll√≥ d√∂nt√©shozatal a feladatk√∂r√ºkben
- **Reaktivit√°s**: K√∂rnyezet v√°ltoz√°saira val√≥ reag√°l√°s
- **Proaktivit√°s**: Kezdem√©nyez≈ë magatart√°s a c√©lok el√©r√©se √©rdek√©ben
- **T√°rsadalmi k√©pess√©g**: M√°s agentekkel √©s rendszerekkel val√≥ egy√ºttm≈±k√∂d√©s
- **Perzisztencia**: √Ållapot meg≈ërz√©se √©s folyamatos m≈±k√∂d√©s

### 9.2 Agent T√≠pusok

#### 9.2.1 Adatgy≈±jt≈ë Agente (Data Collection Agent)
```python
class DataCollectionAgent:
    """
    Funkcionalit√°s:
    - Web scraping koordin√°l√°sa
    - API adatgy≈±jt√©s kezel√©se  
    - Adatvalid√°l√°s √©s tiszt√≠t√°s
    - Hibakezel√©s √©s retry logika
    """
    
    def __init__(self, sources, validators, storage):
        self.sources = sources
        self.validators = validators
        self.storage = storage
        
    async def collect_data(self, targets):
        # Implementation
        pass
```

#### 9.2.2 BrightData MCP Agent (AI-Enhanced Scraper)
```python
class BrightDataMCPAgent:
    """
    Speci√°lis AI-vez√©relt scraping agent
    
    K√©pess√©gek:
    - 18 BrightData tool haszn√°lata
    - Claude AI integration
    - Captcha megold√°s
    - Fejlett anti-detection
    - Fallback logika
    """
    
    async def scrape_with_ai(self, urls, task_description):
        # AI-vez√©relt scraping implement√°ci√≥
        pass
```

#### 9.2.3 Adatfeldolgoz√≥ Agent (Data Processing Agent)
```python
class DataProcessingAgent:
    """
    Funkcionalit√°s:
    - Raw adatok normaliz√°l√°sa
    - Duplik√°tumok elt√°vol√≠t√°sa
    - Kategoriz√°l√°s √©s c√≠mk√©z√©s
    - Min≈ës√©gbiztos√≠t√°s
    """
    
    def process_batch(self, raw_data):
        # Implementation
        pass
```

#### 9.2.4 Scraping Koordin√°tor (Scraping Coordinator)
```python
class ScrapingCoordinator:
    """
    Multi-agent koordin√°ci√≥
    
    Strat√©gi√°k:
    - API_ONLY: Csak hagyom√°nyos API scraping
    - MCP_ONLY: Csak BrightData MCP
    - API_FALLBACK_MCP: API els≈ëdleges, MCP fallback
    - MCP_FALLBACK_API: MCP els≈ëdleges, API fallback  
    - PARALLEL: P√°rhuzamos v√©grehajt√°s
    """
    
    async def coordinate_scraping(self, strategy, targets):
        # Koordin√°ci√≥s logika
        pass
```

#### 9.2.5 Aj√°nl√°si Agent (Recommendation Agent - RAG)
```python
class RecommendationAgent:
    """
    Funkcionalit√°s:
    - Term√©k √∂sszehasonl√≠t√°s
    - Szem√©lyre szabott aj√°nl√°sok
    - RAG alap√∫ v√°laszgener√°l√°s
    - Kontextus meg√©rt√©s
    """
    
    def generate_recommendations(self, user_context, products):
        # Implementation
        pass
```

#### 9.2.6 √Årfigyel≈ë Agent (Price Monitoring Agent)
```python
class PriceMonitoringAgent:
    """
    Funkcionalit√°s:
    - √År tracking k√ºl√∂nb√∂z≈ë forr√°sokon
    - Trend anal√≠zis
    - Riaszt√°sok gener√°l√°sa
    - Historikus adatok kezel√©se
    """
    
    async def monitor_prices(self, products):
        # Implementation
        pass
```

#### 9.2.7 Kompatibilit√°si Agent (Compatibility Agent)
```python
class CompatibilityAgent:
    """
    Funkcionalit√°s:
    - Term√©kek kompatibilit√°s√°nak ellen≈ërz√©se
    - M≈±szaki specifik√°ci√≥k √∂sszehasonl√≠t√°sa
    - Alkalmaz√°si ter√ºletek elemz√©se
    - Szabv√°nyok ellen≈ërz√©se
    """
    
    def check_compatibility(self, product_a, product_b):
        # Implementation
        pass
```

### 9.3 Agent Kommunik√°ci√≥s Protokollok

#### 9.3.1 √úzenet Form√°tumok
```python
class AgentMessage:
    def __init__(self, sender, recipient, message_type, payload, timestamp):
        self.sender = sender
        self.recipient = recipient
        self.message_type = message_type  # REQUEST, RESPONSE, NOTIFICATION
        self.payload = payload
        self.timestamp = timestamp
```

#### 9.3.2 Event Bus Integr√°ci√≥
```python
class AgentEventBus:
    """
    K√∂zponti √ºzenet koordin√°ci√≥
    - Agent-to-agent kommunik√°ci√≥
    - Event subscription/publishing
    - Message queuing (Redis)
    - Error handling
    """
    
    async def publish_event(self, event_type, data):
        pass
        
    async def subscribe_to_events(self, event_types, callback):
        pass
```

### 9.4 Agent Lifecycle Management

#### 9.4.1 Agent States
```python
class AgentState(Enum):
    INITIALIZING = "initializing"
    IDLE = "idle"
    WORKING = "working"
    ERROR = "error"
    STOPPING = "stopping"
    STOPPED = "stopped"
```

#### 9.4.2 Health Monitoring
```python
class AgentHealthMonitor:
    """
    Agent eg√©szs√©g monitoroz√°sa
    - Heartbeat ellen≈ërz√©s
    - Performance metrik√°k
    - Resource haszn√°lat tracking
    - Automatikus √∫jraind√≠t√°s
    """
    
    async def check_agent_health(self, agent_id):
        pass
```

### 9.5 Performance Metrik√°k

#### 9.5.1 Agent Specific Metrics
```python
class AgentMetrics:
    """
    Agent teljes√≠tm√©ny metrik√°k
    - Task completion rate
    - Average response time
    - Error rate
    - Resource consumption
    - Throughput (tasks/second)
    """
    
    def record_task_completion(self, agent_id, duration, success):
        pass
```

#### 9.5.2 System-wide Metrics
- Total active agents
- Message throughput
- System resource usage
- Cross-agent collaboration efficiency

### 9.6 Fejleszt√©si Ir√°nyelvek

#### 9.6.1 Agent Implement√°ci√≥s Szab√°lyok
1. **Modul√°ris fel√©p√≠t√©s**: Minden agent saj√°t modulban
2. **Dependency injection**: Konfigur√°lhat√≥ f√ºgg≈ës√©gek
3. **Error handling**: Graceful degradation
4. **Logging**: Struktur√°lt logok minden m≈±velethez
5. **Testing**: Unit √©s integration tesztek k√∂telez≈ëk

#### 9.6.2 Agent Deployment Strat√©gi√°k
1. **Container-based**: Docker containerekben fut√≥ agente
2. **Scalable**: Horizontal scaling t√°mogat√°sa
3. **Configuration**: Environment alap√∫ konfigur√°ci√≥
4. **Service discovery**: Dinamikus agent felder√≠t√©s

#### 9.6.3 Biztons√°gi Megfontol√°sok
1. **API key management**: Biztons√°gos kulcs t√°rol√°s
2. **Rate limiting**: API h√≠v√°sok korl√°toz√°sa
3. **Input validation**: Minden input valid√°l√°sa
4. **Access control**: Agent jogosults√°gok kezel√©se

### 9.7 Demo-specifikus Agent Implement√°ci√≥

#### 9.7.1 Jelenleg Implement√°lt Agente
- **RockwoolApiScraper**: PDF-alap√∫ adatgy≈±jt√©s
- **BrightDataMCPAgent**: AI-vez√©relt web scraping
- **ScrapingCoordinator**: Multi-strategy koordin√°ci√≥
- **Celery Workers**: Aszinkron task v√©grehajt√°s

#### 9.7.2 Tervezett B≈ëv√≠t√©sek
- Term√©k kompatibilit√°si elemz√©s
- √Årfigyel√©si funkci√≥k
- RAG-alap√∫ term√©k aj√°nl√°s
- Real-time monitoring dashboard

### 9.8 Agent Template Haszn√°lata

#### 9.8.1 √öj Agent L√©trehoz√°sa
```bash
# Agent skeleton gener√°l√°sa
python scripts/create_agent.py --name MyNewAgent --type data_processing

# Konfigur√°ci√≥
export AGENT_CONFIG_PATH=/path/to/config.yaml

# Agent ind√≠t√°sa
python -m app.agents.my_new_agent
```

#### 9.8.2 Integration Checklist
- [ ] Agent oszt√°ly implement√°l√°sa
- [ ] Health check endpoint
- [ ] Metrics collection
- [ ] Error handling
- [ ] Unit tesztek
- [ ] Integration tesztek
- [ ] Documentation
- [ ] Deployment konfigur√°ci√≥

Ez az AI Agent specifik√°ci√≥s sablon biztos√≠tja, hogy minden √∫j agent konzisztens legyen a Lambda demo architekt√∫r√°j√°val √©s t√°mogassa a j√∂v≈ëbeli sk√°l√°zhat√≥s√°got.

## Client-Specific Architecture Methodology (2025-01-27)

### Modular Scraper Design Principles
**üèóÔ∏è Architecture Pattern (from ROCKWOOL_CLIENT_ARCHITECTURE.md):**
```
clients/
‚îú‚îÄ‚îÄ rockwool/
‚îÇ   ‚îú‚îÄ‚îÄ scrapers/termekadatlapok.py    # Client-specific implementation
‚îÇ   ‚îú‚îÄ‚îÄ config/endpoints.py           # URL and selector configuration
‚îÇ   ‚îî‚îÄ‚îÄ utils/file_manager.py         # Client-specific utilities
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ base/scraper.py               # Abstract base classes
‚îÇ   ‚îî‚îÄ‚îÄ mcp/brightdata_client.py      # Shared MCP functionality
‚îî‚îÄ‚îÄ factory/client_factory.py         # Factory pattern for scalability
```

**üîß Implementation Strategy:**
1. **Separation of Concerns**: Each client has isolated codebase
2. **Reusable Components**: Shared utilities for common functionality
3. **Factory Pattern**: `ClientFactory.create_scraper("rockwool", "termekadatlapok")`
4. **Clean API Interface**: `/api/clients/rockwool/scrape/termekadatlapok`
5. **Comprehensive Testing**: Client-specific test suites with fixtures

**üìã Migration Protocol:**
- Phase 1: Extract working code to client-specific modules
- Phase 2: Implement factory pattern and shared components
- Phase 3: Create clean API interfaces
- Phase 4: Add comprehensive testing and documentation

### Success Metrics for Client Modules
- **100% Data Preservation**: No files lost during processing
- **Smart Duplicate Handling**: Subdirectory organization with unique naming
- **Fresh Data Capability**: Auto-refresh before scraping
- **Production Validation**: End-to-end testing with real data
- **Clear Documentation**: API reference and troubleshooting guides

## Memory Management √©s Tanul√°s
- **Tapasztalatok r√∂gz√≠t√©se**: Minden jelent≈ës probl√©mamegold√°s ut√°n memory l√©trehoz√°sa a j√∂v≈ëbeli referenci√°ra.
- **Ism√©tl≈ëd≈ë hib√°k elker√ºl√©se**: Memory ellen≈ërz√©s minden hasonl√≥ feladat el≈ëtt.
- **Folyamatos fejl≈ëd√©s**: Rendszeres visszatekint√©s √©s m√≥dszertan finom√≠t√°s.
- **üéØ SUCCESS PATTERN REPLICATION**: Use proven Rockwool Term√©kadatlap methodology for all future scrapers.