---
description: 
globs: 
alwaysApply: true
---
# Lambda.hu √âp√≠t≈ëanyag AI Projekt - Fejleszt√©si Szab√°lyok

## üìã TARTALOMJEGYZ√âK
1. [Alapelvek √©s Filoz√≥fia](mdc:#1-alapelvek-√©s-filoz√≥fia)
2. [Fejleszt√©si Metodol√≥gia](mdc:#2-fejleszt√©si-metodol√≥gia)
3. [Technikai Infrastrukt√∫ra](mdc:#3-technikai-infrastrukt√∫ra)
4. [K√≥dol√°si Standardok](mdc:#4-k√≥dol√°si-standardok)
5. [AI Agent Architekt√∫ra](mdc:#5-ai-agent-architekt√∫ra)
6. [Hibakezel√©s √©s Tesztel√©s](mdc:#6-hibakezel√©s-√©s-tesztel√©s)
7. [Projekt-specifikus K√∂vetelm√©nyek](mdc:#7-projekt-specifikus-k√∂vetelm√©nyek)
8. [Tanul√°s √©s Fejl≈ëd√©s](mdc:#8-tanul√°s-√©s-fejl≈ëd√©s)

---

## 1. ALAPELVEK √âS FILOZ√ìFIA

### 1.1 √Åltal√°nos Fejleszt√©si Elvek
- **Teljes kontextus figyelembev√©tele**: Minden k√≥dgener√°l√°sn√°l √©s m√≥dos√≠t√°sn√°l haszn√°ld a `@workspace` kontextust
- **Production-ready k√≥d**: Tiszta, karbantarthat√≥ k√≥d, NINCSENEK placeholder-ek vagy dummy adatok
- **Technol√≥giai stack betart√°sa**: FastAPI, SQLAlchemy, Scrapy, React/Next.js, LangChain, Celery, PostgreSQL
- **Magyar nyelv≈± dokument√°ci√≥**: Minden felhaszn√°l√≥ fel√© ir√°nyul√≥ sz√∂veg, komment√°r, log √ºzenet magyar nyelv≈±

### 1.2 Fejleszt√©si Filoz√≥fia
- **Evidence-First Approach**: Mindig l√©tez≈ë, m≈±k√∂d≈ë adatokb√≥l indulj ki
- **Zero Data Loss Policy**: Soha ne √≠rj fel√ºl megl√©v≈ë adatokat
- **Graceful Fallbacks**: Minden els≈ëdleges m√≥dszerhez biztos√≠ts fallback megold√°st
- **Minim√°lis k√ºls≈ë f√ºgg≈ës√©gek**: Ker√ºld a felesleges npm/pip csomagokat

---

## 2. FEJLESZT√âSI METODOL√ìGIA

### 2.1 PROVEN SUCCESS METHODOLOGY (2025-01-27 - Rockwool Term√©kadatlap) ‚úÖ
**üéØ Evidence-First Development Process:**
1. **Evidence-First Approach** - L√©tez≈ë m≈±k√∂d≈ë adatokb√≥l (debug files, cached content) indul√°s
2. **Incremental Component Testing** - Minden komponens egyenk√©nti tesztel√©se integr√°l√°s el≈ëtt
3. **Zero Data Loss Policy** - Duplik√°tum kezel√©s implement√°l√°sa, soha ne √≠rj fel√ºl adatokat
4. **Fresh Data Strategy** - Tartalom auto-refresh scraping el≈ëtt, amikor lehets√©ges
5. **Production Validation** - Teljes end-to-end tesztel√©s befejez√©s el≈ëtt

**üîß Technikai Implement√°ci√≥s Mint√°k:**
- **Smart Duplicate Handling**: Alk√∂nyvt√°rak (`duplicates/`) URL hash-el√©ssel egyedi f√°jlnevekhez
- **Debug File Strategy**: Cached HTML tartalom haszn√°lata dinamikus bet√∂lt√©si probl√©m√°k megker√ºl√©s√©re
- **Async Concurrent Downloads**: Async/await mint√°k teljes√≠tm√©nyhez
- **Comprehensive Logging**: Siker/hiba sz√°mok, f√°jl lok√°ci√≥k, feldolgoz√°si id≈ë
- **Graceful Fallbacks**: Mindig biztos√≠ts fallback mechanizmust

### 2.2 Struktur√°lt Probl√©mamegold√°s
1. **Probl√©ma elemz√©se √©s dokument√°l√°sa**
2. **Lehets√©ges megold√°sok brainstormel√©se**
3. **Legegyszer≈±bb megold√°s implement√°l√°sa**
4. **Tesztel√©s √©s valid√°l√°s**
5. **Tapasztalatok dokument√°l√°sa**
6. **TILTOTT**: Random pr√≥b√°lgat√°s √©s t√∂bbsz√∂ri ugyanolyan megk√∂zel√≠t√©s

### 2.3 Client-Specific Architecture Methodology
**üèóÔ∏è Modular Scraper Design Pattern:**
```
clients/
‚îú‚îÄ‚îÄ rockwool/
‚îÇ   ‚îú‚îÄ‚îÄ scrapers/termekadatlapok.py    # Client-specific implementation
‚îÇ   ‚îú‚îÄ‚îÄ config/endpoints.py           # URL and selector configuration
‚îÇ   ‚îî‚îÄ‚îÄ utils/file_manager.py         # Client-specific utilities
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ base/scraper.py               # Abstract base classes
‚îÇ   ‚îî‚îÄ‚îÄ mcp/brightdata_client.py      # Shared MCP functionality
‚îî‚îÄ‚îÄ factory/client_factory.py         # Factory pattern for scalability
```

**üîß Implement√°ci√≥s Strat√©gia:**
1. **Separation of Concerns**: Minden kliens izol√°lt k√≥db√°zissal
2. **Reusable Components**: K√∂z√∂s funkci√≥khoz shared utilities
3. **Factory Pattern**: `ClientFactory.create_scraper("rockwool", "termekadatlapok")`
4. **Clean API Interface**: `/api/clients/rockwool/scrape/termekadatlapok`
5. **Comprehensive Testing**: Kliens-specifikus teszt suite-ok fixture-√∂kkel

---

## 3. TECHNIKAI INFRASTRUKT√öRA

### 3.1 Docker √©s DevOps Elvek
**üê≥ Container Management:**
- **Next.js Docker**: MINDIG `npx next dev` haszn√°lat a CMD-ben "next: not found" hib√°k elker√ºl√©s√©re
- **Container √©p√≠t√©s**: `--no-cache` flag haszn√°lata probl√©m√°k eset√©n
- **Build strat√©gia**: Single-stage Dockerfile fejleszt√©shez, multi-stage csak production-ra

**üîß F√ºgg≈ës√©g Management:**
- **TypeScript √©s React verzi√≥k**: Next.js 14.2.18 + React 18 kombin√°ci√≥t haszn√°lj
- **Verzi√≥ kompatibilit√°s**: Docker k√∂rnyezetben MINDIG ellen≈ërizd a f√ºgg≈ës√©g verzi√≥kat

**üîç Hibakeres√©si Priorit√°s:**
1. Container logok (`docker-compose logs [service]`)
2. F√ºgg≈ës√©g verzi√≥ ellen≈ërz√©s
3. Dockerfile optimaliz√°l√°s
4. √öjabb megk√∂zel√≠t√©s keres√©se

### 3.2 Windows PowerShell Kompatibilit√°s (2025-06-29 - MEGOLDVA ‚úÖ)
**üîß NPX Kompatibilit√°si Fix:**
- **Probl√©ma**: `[WinError 2] A rendszer nem tal√°lja a megadott f√°jlt` NPX parancsok eset√©n
- **Megold√°s**: Platform detection √©s `npx.cmd` haszn√°lata Windows rendszeren
- **Implement√°ci√≥**: 
  ```python
  import platform
  npx_cmd = "npx.cmd" if platform.system() == "Windows" else "npx"
  ```

**üêç Python 3.12 Upgrade (Jaclang Kompatibilit√°s):**
- **Probl√©ma**: `ImportError: cannot import name 'override' from 'typing'` Python 3.11-el
- **Megold√°s**: Python 3.12.10 upgrade √©s √∫j virtual environment (`.venv312`)
- **Parancsok**:
  ```bash
  py -3.12 -m venv .venv312
  .venv312\Scripts\activate
  pip install jaclang
  ```

**‚úÖ Tesztel√©si Eredm√©nyek:**
- NPX parancsok: ‚úÖ M≈±k√∂dik | Node.js v20.13.1: ‚úÖ El√©rhet≈ë
- MCP Server startup: ‚úÖ Sikeres | BrightData tools: ‚úÖ 48/48 bet√∂ltve
- Claude AI API calls: ‚úÖ M≈±k√∂dik | PowerShell subprocess: ‚úÖ Hib√°k n√©lk√ºl

---

## 4. K√ìDOL√ÅSI STANDARDOK

### 4.1 Python (Backend)
- **Form√°z√≥**: `black`
- **T√≠pusellen≈ërz√©s**: Type Hinting k√∂telez≈ë minden f√ºggv√©nydefin√≠ci√≥n√°l √©s v√°ltoz√≥n√°l
- **API-k**: Minden API v√©gponthoz Pydantic s√©ma sz√ºks√©ges valid√°ci√≥hoz
- **Dokument√°ci√≥**: Minden funkci√≥n√°l r√©szletes docstring Python konvenci√≥kkal
- **Web Scraping**: Minden scraper `async/await` patternt k√∂vesse, hibakezel√©s √©s `asyncio.sleep` k√∂telez≈ë

### 4.2 TypeScript (Frontend)
- **M√≥d**: Strict mode
- **T√≠pusok**: Explicit return type-ok k√∂telez≈ëek
- **Komponensek**: Minden komponensnek saj√°t props interface-szel
- **St√≠lus**: Tailwind CSS a megadott design tokenekkel
- **Dokument√°ci√≥**: Minden React komponens tetej√©n komment a funkci√≥r√≥l

### 4.3 F√°jl- √©s Elnevez√©si Konvenci√≥k
```
Backend:
- API route-ok: /backend/app/api/[resource].py
- Adatb√°zis modellek: /backend/app/models/[model].py
- Service-ek: /backend/app/services/[service_name]_service.py

Frontend:
- React komponensek: /frontend/src/components/[Feature]/[Component].tsx (PascalCase)
- React hook-ok: /frontend/src/hooks/use[HookName].ts (camelCase)
```

---

## 5. AI AGENT ARCHITEKT√öRA

### 5.1 √Åltal√°nos Agent Tulajdons√°gok
- **Auton√≥mia**: √ñn√°ll√≥ d√∂nt√©shozatal a feladatk√∂r√ºkben
- **Reaktivit√°s**: K√∂rnyezet v√°ltoz√°saira val√≥ reag√°l√°s
- **Proaktivit√°s**: Kezdem√©nyez≈ë magatart√°s a c√©lok el√©r√©se √©rdek√©ben
- **T√°rsadalmi k√©pess√©g**: M√°s agentekkel √©s rendszerekkel val√≥ egy√ºttm≈±k√∂d√©s
- **Perzisztencia**: √Ållapot meg≈ërz√©se √©s folyamatos m≈±k√∂d√©s

### 5.2 Agent T√≠pusok √©s Implement√°ci√≥k

#### 5.2.1 Adatgy≈±jt≈ë Agent (Data Collection Agent)
```python
class DataCollectionAgent:
    """
    Funkcionalit√°s: Web scraping koordin√°l√°sa, API adatgy≈±jt√©s,
    adatvalid√°l√°s √©s tiszt√≠t√°s, hibakezel√©s √©s retry logika
    """
    def __init__(self, sources, validators, storage):
        self.sources = sources
        self.validators = validators
        self.storage = storage
```

#### 5.2.2 BrightData MCP Agent (AI-Enhanced Scraper)
```python
class BrightDataMCPAgent:
    """
    Speci√°lis AI-vez√©relt scraping agent
    K√©pess√©gek: 48 BrightData tool, Claude AI integration,
    Captcha megold√°s, fejlett anti-detection, fallback logika
    """
    async def scrape_with_ai(self, urls, task_description):
        # AI-vez√©relt scraping implement√°ci√≥
        pass
```

#### 5.2.3 Scraping Koordin√°tor (Multi-Strategy)
```python
class ScrapingCoordinator:
    """
    Strat√©gi√°k:
    - API_ONLY: Csak hagyom√°nyos API scraping
    - MCP_ONLY: Csak BrightData MCP
    - API_FALLBACK_MCP: API els≈ëdleges, MCP fallback
    - MCP_FALLBACK_API: MCP els≈ëdleges, API fallback  
    - PARALLEL: P√°rhuzamos v√©grehajt√°s
    """
    async def coordinate_scraping(self, strategy, targets):
        # Koordin√°ci√≥s logika
        pass
```

### 5.3 Agent Kommunik√°ci√≥ √©s Lifecycle
**üîÑ Agent States:**
- INITIALIZING ‚Üí IDLE ‚Üí WORKING ‚Üí ERROR/STOPPING ‚Üí STOPPED

**üì° Kommunik√°ci√≥s Protokoll:**
```python
class AgentMessage:
    def __init__(self, sender, recipient, message_type, payload, timestamp):
        # REQUEST, RESPONSE, NOTIFICATION t√≠pusok
        pass
```

### 5.4 Agent Fejleszt√©si Szab√°lyok
1. **Modul√°ris fel√©p√≠t√©s**: Minden agent saj√°t modulban
2. **Dependency injection**: Konfigur√°lhat√≥ f√ºgg≈ës√©gek
3. **Error handling**: Graceful degradation
4. **Logging**: Struktur√°lt logok minden m≈±velethez
5. **Testing**: Unit √©s integration tesztek k√∂telez≈ëk

### 5.5 Agent Deployment Elvek
1. **Container-based**: Docker containerekben fut√≥ agente
2. **Scalable**: Horizontal scaling t√°mogat√°sa
3. **Configuration**: Environment alap√∫ konfigur√°ci√≥
4. **Service discovery**: Dinamikus agent felder√≠t√©s

### 5.6 Agent Biztons√°gi Elvek
1. **API key management**: Biztons√°gos kulcs t√°rol√°s
2. **Rate limiting**: API h√≠v√°sok korl√°toz√°sa
3. **Input validation**: Minden input valid√°l√°sa
4. **Access control**: Agent jogosults√°gok kezel√©se

### 5.7 Jelenleg Implement√°lt Agente
**‚úÖ Implement√°lt:**
- RockwoolApiScraper (PDF-alap√∫ adatgy≈±jt√©s)
- BrightDataMCPAgent (AI-vez√©relt web scraping)
- ScrapingCoordinator (Multi-strategy koordin√°ci√≥)
- Celery Workers (Aszinkron task v√©grehajt√°s)

---

## 6. HIBAKEZEL√âS √âS TESZTEL√âS

### 6.1 Hibakezel√©si Protokoll
1. **Probl√©ma pontos elemz√©se √©s dokument√°l√°sa**
2. **Lehets√©ges megold√°sok brainstormel√©se**
3. **Legegyszer≈±bb megold√°s implement√°l√°sa**
4. **Tesztel√©s √©s valid√°l√°s**
5. **Tapasztalatok dokument√°l√°sa a j√∂v≈ëre n√©zve**
6. **TILTOTT**: Random pr√≥b√°lgat√°s √©s t√∂bbsz√∂ri ugyanolyan megk√∂zel√≠t√©s

### 6.2 Tesztel√©si Strat√©gia
- **Tesztel√©s minden l√©p√©sn√©l**: Ne v√°rj a teljes implement√°ci√≥ v√©g√©re
- **Incremental Component Testing**: Minden komponens egyenk√©nti tesztel√©se
- **Production Validation**: Teljes end-to-end tesztel√©s befejez√©s el≈ëtt
- **Unit √©s Integration tesztek**: K√∂telez≈ëek minden agent implement√°ci√≥n√°l

---

## 7. PROJEKT-SPECIFIKUS K√ñVETELM√âNYEK

### 7.1 Nyelvi √©s Form√°tumk√∂vetelm√©nyek
- **Nyelv**: Minden felhaszn√°l√≥ fel√© ir√°nyul√≥ sz√∂veg magyar nyelv≈±
- **AI V√°laszok**: "√âp√≠t√©szeti szak√©rt≈ëi" st√≠lus a Rendszertervnek megfelel≈ëen
- **Adatform√°tumok**:
  - √Årak: `HUF` p√©nznemben, `m2`, `db` stb. egys√©gekkel
  - M≈±szaki param√©terek: Normaliz√°lt JSONB strukt√∫r√°ban

### 7.2 Success Metrics for Client Modules
- **100% Data Preservation**: Nincs f√°jlveszt√©s feldolgoz√°s sor√°n
- **Smart Duplicate Handling**: Alk√∂nyvt√°r szervez√©s egyedi n√©vad√°ssal
- **Fresh Data Capability**: Auto-refresh scraping el≈ëtt
- **Production Validation**: End-to-end tesztel√©s val√≥s adatokkal
- **Clear Documentation**: API referencia √©s hibaelh√°r√≠t√°si √∫tmutat√≥k

---

## 8. TANUL√ÅS √âS FEJL≈êD√âS

### 8.1 Memory Management
- **Tapasztalatok r√∂gz√≠t√©se**: Minden jelent≈ës probl√©mamegold√°s ut√°n memory l√©trehoz√°sa
- **Ism√©tl≈ëd≈ë hib√°k elker√ºl√©se**: Memory ellen≈ërz√©s minden hasonl√≥ feladat el≈ëtt
- **Folyamatos fejl≈ëd√©s**: Rendszeres visszatekint√©s √©s m√≥dszertan finom√≠t√°s
- **üéØ SUCCESS PATTERN REPLICATION**: Proven Rockwool Term√©kadatlap metodol√≥gia haszn√°lata

### 8.2 Dokument√°l√°s √©s Tud√°smegoszt√°s
- **Dokument√°l√°s k√∂zben**: Minden jelent≈ës v√°ltoztat√°sn√°l azonnal dokument√°ci√≥ √©s kommentek
- **Verzi√≥ kompatibilit√°s nyomon k√∂vet√©se**: Docker k√∂rnyezetben f√ºgg≈ës√©g verzi√≥k ellen≈ërz√©se
- **Tapasztalatok megoszt√°sa**: Sikeres mint√°k dokument√°l√°sa √©s √∫jrafelhaszn√°l√°sa

---

## üìö GYORS REFERENCIA

### Legfontosabb Parancsok
```bash
# Python 3.12 k√∂rnyezet
py -3.12 -m venv .venv312
.venv312\Scripts\activate

# Docker hibakeres√©s
docker-compose logs [service]
docker-compose build --no-cache

# Agent l√©trehoz√°s
python scripts/create_agent.py --name MyNewAgent --type data_processing
```

### Kritikus Ellen≈ërz≈ë Lista
- [ ] Evidence-first approach alkalmazva?
- [ ] Zero data loss policy implement√°lva?
- [ ] Graceful fallbacks biztos√≠tva?
- [ ] Magyar nyelv≈± dokument√°ci√≥?
- [ ] Production validation elv√©gezve?
- [ ] Memory dokument√°l√°s megt√∂rt√©nt?